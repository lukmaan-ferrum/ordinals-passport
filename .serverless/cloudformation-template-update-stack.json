{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetVrfDocumentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-getVrfDocument"
      }
    },
    "UpdateWeb3NameLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-updateWeb3Name"
      }
    },
    "BulkUploadVrfLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-bulkUploadVrf"
      }
    },
    "GetPassportsByTierLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-getPassportsByTier"
      }
    },
    "DoLotteryLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-doLottery"
      }
    },
    "UpdatePfpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-updatePfp"
      }
    },
    "TestConnectivityLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ordinals-passport-dev-testConnectivity"
      }
    },
    "GetVrfDocumentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-getVrfDocument",
        "MemorySize": 1024,
        "Timeout": 25,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "GetVrfDocumentLogGroup"
      ]
    },
    "UpdateWeb3NameLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-updateWeb3Name",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "UpdateWeb3NameLogGroup"
      ]
    },
    "BulkUploadVrfLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-bulkUploadVrf",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "BulkUploadVrfLogGroup"
      ]
    },
    "GetPassportsByTierLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-getPassportsByTier",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "GetPassportsByTierLogGroup"
      ]
    },
    "DoLotteryLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-doLottery",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "DoLotteryLogGroup"
      ]
    },
    "UpdatePfpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-updatePfp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "UpdatePfpLogGroup"
      ]
    },
    "TestConnectivityLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/ordinals-passport/dev/1716514852800-2024-05-24T01:40:52.800Z/ordinals-passport.zip"
        },
        "Handler": "dist/lambda.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "ordinals-passport-dev-testConnectivity",
        "MemorySize": 1024,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://ordinal_passport_vrf_app:U7ifMfDBuI0cFuvD@ferrum-netwrok-dev-qa-u.kyjw1.mongodb.net/ordinal-passport-vrf-dev?retryWrites=true&w=majority",
            "S3_BUCKET": "ordinals-passport-pfps"
          }
        },
        "Role": "arn:aws:iam::806611346442:role/serverless-lambda-ordinals-passport-role"
      },
      "DependsOn": [
        "TestConnectivityLogGroup"
      ]
    },
    "GetVrfDocumentLambdaVersionV4CnnlPSUUIQ6IZrVJE1mEpEiwBCz5ufrNHlBJX4ns": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetVrfDocumentLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "UpdateWeb3NameLambdaVersionAuirQtLRAQxMAJOlWY9hGy5SpFfobwJwYyswlOaCtlE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateWeb3NameLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "BulkUploadVrfLambdaVersionJNQeWhj8JTqB3fbcUuihoFeVO8VodR6K4m9NgXlI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BulkUploadVrfLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "GetPassportsByTierLambdaVersiontvN254JTGZMm9qMCbEhOUP5m9a4ZjeUndtO3mbUsjo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPassportsByTierLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "DoLotteryLambdaVersionAilNM17BRFNPe6TCTL5rl6IaTS9GneId4gZpLBxJM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DoLotteryLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "UpdatePfpLambdaVersionPDpEAWxps8PEvZPLuLOVnDnr5odpy0JDGw46Gh583s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdatePfpLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "TestConnectivityLambdaVersionCyb9mDJYr6WUVAAE65z8Vzo5B8vjourdznyivOQT5E4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TestConnectivityLambdaFunction"
        },
        "CodeSha256": "UchNphXqO7cDvnu9xecOGsbdcfRel06DZFNeREmKsdA="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-ordinals-passport",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceVrf": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "vrf",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVrfVrfVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVrf"
        },
        "PathPart": "{vrf}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVrfVrfVarUpdate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVrfVrfVar"
        },
        "PathPart": "update",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVrfVrfVarUpdateWeb3name": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdate"
        },
        "PathPart": "web3Name",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVrfVrfVarUpdatePfp": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdate"
        },
        "PathPart": "pfp",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdmin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "admin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminVrf": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "vrf",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminVrfBulkupload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminVrf"
        },
        "PathPart": "bulkUpload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminPassports": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "passports",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminLottery": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "lottery",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTestDashconnectivity": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "test-connectivity",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVrfVrfVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVrfVrfVarUpdateWeb3nameOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdateWeb3name"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminVrfBulkuploadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminVrfBulkupload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminPassportsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminPassports"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminLotteryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminLottery"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVrfVrfVarUpdatePfpOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdatePfp"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTestDashconnectivityOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTestDashconnectivity"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVrfVrfVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetVrfDocumentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetVrfDocumentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodVrfVrfVarUpdateWeb3namePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdateWeb3name"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateWeb3NameLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateWeb3NameLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminVrfBulkuploadPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminVrfBulkupload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BulkUploadVrfLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "BulkUploadVrfLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminPassportsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.tier": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminPassports"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPassportsByTierLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayOrdinalspassportRequestValidator"
        }
      },
      "DependsOn": [
        "GetPassportsByTierLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminLotteryGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.winners": true,
          "method.request.querystring.tiers": false
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminLottery"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DoLotteryLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayOrdinalspassportRequestValidator"
        }
      },
      "DependsOn": [
        "DoLotteryLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodVrfVrfVarUpdatePfpPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVrfVrfVarUpdatePfp"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdatePfpLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdatePfpLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTestDashconnectivityGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTestDashconnectivity"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TestConnectivityLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TestConnectivityLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayOrdinalspassportRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "ordinals-passport-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayDeployment1716514846907": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodVrfVrfVarOptions",
        "ApiGatewayMethodVrfVrfVarUpdateWeb3nameOptions",
        "ApiGatewayMethodAdminVrfBulkuploadOptions",
        "ApiGatewayMethodAdminPassportsOptions",
        "ApiGatewayMethodAdminLotteryOptions",
        "ApiGatewayMethodVrfVrfVarUpdatePfpOptions",
        "ApiGatewayMethodTestDashconnectivityOptions",
        "ApiGatewayMethodVrfVrfVarGet",
        "ApiGatewayMethodVrfVrfVarUpdateWeb3namePost",
        "ApiGatewayMethodAdminVrfBulkuploadPost",
        "ApiGatewayMethodAdminPassportsGet",
        "ApiGatewayMethodAdminLotteryGet",
        "ApiGatewayMethodVrfVrfVarUpdatePfpPost",
        "ApiGatewayMethodTestDashconnectivityGet"
      ]
    },
    "GetVrfDocumentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetVrfDocumentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateWeb3NameLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateWeb3NameLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "BulkUploadVrfLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BulkUploadVrfLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPassportsByTierLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPassportsByTierLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DoLotteryLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DoLotteryLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdatePfpLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdatePfpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TestConnectivityLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TestConnectivityLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetVrfDocumentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetVrfDocumentLambdaVersionV4CnnlPSUUIQ6IZrVJE1mEpEiwBCz5ufrNHlBJX4ns"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-GetVrfDocumentLambdaFunctionQualifiedArn"
      }
    },
    "UpdateWeb3NameLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateWeb3NameLambdaVersionAuirQtLRAQxMAJOlWY9hGy5SpFfobwJwYyswlOaCtlE"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-UpdateWeb3NameLambdaFunctionQualifiedArn"
      }
    },
    "BulkUploadVrfLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BulkUploadVrfLambdaVersionJNQeWhj8JTqB3fbcUuihoFeVO8VodR6K4m9NgXlI"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-BulkUploadVrfLambdaFunctionQualifiedArn"
      }
    },
    "GetPassportsByTierLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPassportsByTierLambdaVersiontvN254JTGZMm9qMCbEhOUP5m9a4ZjeUndtO3mbUsjo"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-GetPassportsByTierLambdaFunctionQualifiedArn"
      }
    },
    "DoLotteryLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DoLotteryLambdaVersionAilNM17BRFNPe6TCTL5rl6IaTS9GneId4gZpLBxJM"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-DoLotteryLambdaFunctionQualifiedArn"
      }
    },
    "UpdatePfpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdatePfpLambdaVersionPDpEAWxps8PEvZPLuLOVnDnr5odpy0JDGw46Gh583s"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-UpdatePfpLambdaFunctionQualifiedArn"
      }
    },
    "TestConnectivityLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TestConnectivityLambdaVersionCyb9mDJYr6WUVAAE65z8Vzo5B8vjourdznyivOQT5E4"
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-TestConnectivityLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-ordinals-passport-dev-ServiceEndpoint"
      }
    }
  }
}